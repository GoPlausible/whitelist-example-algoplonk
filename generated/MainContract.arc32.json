{
    "hints": {
        "create(string)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "update()void": {
            "call_config": {
                "update_application": "CALL",
                "delete_application": "CALL"
            }
        },
        "opt_in_or_out()void": {
            "call_config": {
                "opt_in": "CALL",
                "close_out": "CALL"
            }
        },
        "add_address_to_whitelist(byte[32],byte[32][])string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_on_whitelist(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpNYWluQ29udHJhY3QuTWFpbkNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyAvaG9tZS9nd3MvZGV2L2FsZ29yYW5kL3prcC93aGl0ZWxpc3QtZXhhbXBsZS1hbGdvcGxvbmsvTWFpbkNvbnRyYWN0LnB5OjE5CiAgICAvLyBjbGFzcyBNYWluQ29udHJhY3QocHkuQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "app_name": {
                    "type": "bytes",
                    "key": "app_name"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "whitelist": {
                    "type": "uint64",
                    "key": "whitelist"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "MainContract",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Create the application"
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Update the application if it is mutable (manager only)"
            },
            {
                "name": "opt_in_or_out",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Opt in or out of the application"
            },
            {
                "name": "add_address_to_whitelist",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "address"
                    },
                    {
                        "type": "byte[32][]",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Add caller to the whitelist if the zk proof is valid.\nOn success, will return an empty string. Otherwise, will return an error message."
            },
            {
                "name": "is_on_whitelist",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Check if an address is on the whitelist"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}