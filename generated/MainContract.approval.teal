#pragma version 10

MainContract.MainContract.approval_program:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:20
    // class MainContract(py.ARC4Contract):
    method "create(string)void"
    method "update()void"
    method "opt_in_or_out()void"
    method "add_address_to_whitelist(byte[32],byte[32][])string"
    method "is_on_whitelist(address)bool"
    txna ApplicationArgs 0
    match main_create_route@1 main_update_route@2 main_opt_in_or_out_route@3 main_add_address_to_whitelist_route@4 main_is_on_whitelist_route@5
    err // reject transaction

main_create_route@1:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:24
    // @abimethod(create='require')
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:20
    // class MainContract(py.ARC4Contract):
    txna ApplicationArgs 1
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:24
    // @abimethod(create='require')
    callsub create
    int 1
    return

main_update_route@2:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:29
    // @abimethod(allow_actions=["UpdateApplication", "DeleteApplication"])
    int 1
    txn OnCompletion
    shl
    int 48
    &
    assert // OnCompletion is one of UpdateApplication, DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub update
    int 1
    return

main_opt_in_or_out_route@3:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:34
    // @abimethod(allow_actions=["OptIn", "CloseOut"])
    int 1
    txn OnCompletion
    shl
    int 6
    &
    assert // OnCompletion is one of OptIn, CloseOut
    txn ApplicationID
    assert // is not creating
    callsub opt_in_or_out
    int 1
    return

main_add_address_to_whitelist_route@4:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:39
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:20
    // class MainContract(py.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:39
    // @abimethod
    callsub add_address_to_whitelist
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_is_on_whitelist_route@5:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:75
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:20
    // class MainContract(py.ARC4Contract):
    txna ApplicationArgs 1
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:75
    // @abimethod
    callsub is_on_whitelist
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return


// MainContract.MainContract.create(name: bytes) -> void:
create:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:24-25
    // @abimethod(create='require')
    // def create(self, name: String) -> None:
    proto 1 0
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:27
    // self.app_name = name
    byte "app_name"
    frame_dig -1
    app_global_put
    retsub


// MainContract.MainContract.update() -> void:
update:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:29-30
    // @abimethod(allow_actions=["UpdateApplication", "DeleteApplication"])
    // def update(self) -> None:
    proto 0 0
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:32
    // assert Global.creator_address == Txn.sender
    global CreatorAddress
    txn Sender
    ==
    assert
    retsub


// MainContract.MainContract.opt_in_or_out() -> void:
opt_in_or_out:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:34-35
    // @abimethod(allow_actions=["OptIn", "CloseOut"])
    // def opt_in_or_out(self) -> None:
    proto 0 0
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:37
    // return
    retsub


// MainContract.MainContract.add_address_to_whitelist(address: bytes, proof: bytes) -> bytes:
add_address_to_whitelist:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:39-44
    // @abimethod
    // def add_address_to_whitelist(
    //     self,
    //     address: Bytes32,
    //     proof: DynamicArray[Bytes32]
    // ) -> String:
    proto 2 1
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:49
    // py.ensure_budget(verifier_budget, fee_source=py.OpUpFeeSource.GroupCredit)
    int 145000
    int 0
    callsub ensure_budget
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:55
    // py.op.bzero(32) | (py.BigUInt.from_bytes(address.bytes) % curve_mod).bytes
    int 32
    bzero
    frame_dig -2
    byte 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    b%
    b|
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:62
    // DynamicArray(address_mod.copy())
    byte 0x0001
    swap
    concat
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:60
    // TemplateVar[UInt64]("VERIFIER_APP_ID"),
    int 698475927
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:58-63
    // # Verify the proof by calling the deposit verifier app
    // verified = verify_proof(
    //     TemplateVar[UInt64]("VERIFIER_APP_ID"),
    //     proof,
    //     DynamicArray(address_mod.copy())
    // )
    frame_dig -1
    uncover 2
    callsub verify_proof
    pop
    frame_bury -1
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:64
    // if not verified:
    byte 0x00
    ==
    bz add_address_to_whitelist_after_if_else@2
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:65
    // return(String("Proof verification failed"))
    byte 0x001950726f6f6620766572696669636174696f6e206661696c6564
    retsub

add_address_to_whitelist_after_if_else@2:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:69
    // if not Txn.sender == account:
    txn Sender
    frame_dig -2
    ==
    bnz add_address_to_whitelist_after_if_else@4
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:70
    // return(String("Sender address does not match authorized address"))
    byte 0x003053656e646572206164647265737320646f6573206e6f74206d6174636820617574686f72697a65642061646472657373
    retsub

add_address_to_whitelist_after_if_else@4:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:72
    // self.whitelist[account] = True
    frame_dig -2
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:22
    // self.whitelist = LocalState(bool)
    byte "whitelist"
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:72
    // self.whitelist[account] = True
    int 1
    app_local_put
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:73
    // return String("")
    byte 0x0000
    retsub


// algopy.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    // <algopy>/algopy.py:11-17
    proto 2 0
    // <algopy>/algopy.py:18
    frame_dig -2
    int 10
    +

ensure_budget_while_top@1:
    // <algopy>/algopy.py:19
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    // <algopy>/algopy.py:20
    itxn_begin
    // <algopy>/algopy.py:21
    int appl
    itxn_field TypeEnum
    // <algopy>/algopy.py:22
    int DeleteApplication
    itxn_field OnCompletion
    // <algopy>/algopy.py:23
    byte 0x068101
    itxn_field ApprovalProgram
    // <algopy>/algopy.py:24
    byte 0x068101
    itxn_field ClearStateProgram
    // <algopy>/algopy.py:25-29
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    // <algopy>/algopy.py:27
    int 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_1@4:
    // <algopy>/algopy.py:29
    global MinTxnFee
    itxn_field Fee

ensure_budget_switch_case_next@6:
    // <algopy>/algopy.py:30
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_after_while@7:
    retsub


// MainContract.verify_proof(app_id: uint64, proof: bytes, public_inputs: bytes) -> bytes, bytes, bytes:
verify_proof:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:86-91
    // @subroutine
    // def verify_proof(
    //     app_id: UInt64,
    //     proof: DynamicArray[Bytes32],
    //     public_inputs: DynamicArray[Bytes32]
    // ) -> Bool:
    proto 3 3
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:93-99
    // verified = itxn.ApplicationCall(
    //     app_id=app_id,
    //     fee=0,
    //     app_args=(arc4_signature("verify(byte[32][],byte[32][])bool"),
    //               proof.copy(), public_inputs.copy()),
    //     on_completion=py.OnCompleteAction.NoOp
    // ).submit().last_log
    itxn_begin
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:98
    // on_completion=py.OnCompleteAction.NoOp
    int NoOp
    itxn_field OnCompletion
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:96
    // app_args=(arc4_signature("verify(byte[32][],byte[32][])bool"),
    method "verify(byte[32][],byte[32][])bool"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:93
    // verified = itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:95
    // fee=0,
    int 0
    itxn_field Fee
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:93-99
    // verified = itxn.ApplicationCall(
    //     app_id=app_id,
    //     fee=0,
    //     app_args=(arc4_signature("verify(byte[32][],byte[32][])bool"),
    //               proof.copy(), public_inputs.copy()),
    //     on_completion=py.OnCompleteAction.NoOp
    // ).submit().last_log
    itxn_submit
    itxn LastLog
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:100
    // return Bool.from_log(verified)
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    frame_dig -2
    frame_dig -1
    retsub


// MainContract.MainContract.is_on_whitelist(address: bytes) -> bytes:
is_on_whitelist:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:75-76
    // @abimethod
    // def is_on_whitelist(self, address: Address) -> Bool:
    proto 1 1
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:79
    // opted_in = account.is_opted_in(Global.current_application_id)
    frame_dig -1
    global CurrentApplicationID
    app_opted_in
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:80
    // if not opted_in:
    bnz is_on_whitelist_after_if_else@2
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:81
    // return Bool(False)
    byte 0x00
    retsub

is_on_whitelist_after_if_else@2:
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:82
    // whitelisted = self.whitelist.get(account, False)
    frame_dig -1
    int 0
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:22
    // self.whitelist = LocalState(bool)
    byte "whitelist"
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:82
    // whitelisted = self.whitelist.get(account, False)
    app_local_get_ex
    int 0
    cover 2
    select
    // /home/gws/dev/algorand/zkp/whitelist-example-algoplonk/MainContract.py:83
    // return Bool(whitelisted)
    byte 0x00
    int 0
    uncover 2
    setbit
    retsub
