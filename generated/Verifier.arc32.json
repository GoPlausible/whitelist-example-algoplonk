{
    "hints": {
        "create(string)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "update()void": {
            "call_config": {
                "update_application": "CALL",
                "delete_application": "CALL"
            }
        },
        "make_immutable()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify(byte[32][],byte[32][])bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpWZXJpZmllci5WZXJpZmllci5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gL2hvbWUvZ3dzL2Rldi9hbGdvcmFuZC96a3Avd2hpdGVsaXN0LWV4YW1wbGUtYWxnb3Bsb25rL2dlbmVyYXRlZC9WZXJpZmllci5weTozNwogICAgLy8gY2xhc3MgVmVyaWZpZXIocHkuQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "app_name": {
                    "type": "bytes",
                    "key": "app_name"
                },
                "immutable": {
                    "type": "uint64",
                    "key": "immutable"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Verifier",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "On creation, save application name in global state"
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Creator can update and delete the application if the immutable\nproperty is false."
            },
            {
                "name": "make_immutable",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Creator can make the contract immutable."
            },
            {
                "name": "verify",
                "args": [
                    {
                        "type": "byte[32][]",
                        "name": "proof"
                    },
                    {
                        "type": "byte[32][]",
                        "name": "public_inputs"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Verify the proof for the given public inputs.\nReturn a boolean indicating whether the proof is valid"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}